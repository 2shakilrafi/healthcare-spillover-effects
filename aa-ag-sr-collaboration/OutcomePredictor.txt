# -*- coding: utf-8 -*-
"""
Healthcare Outcome Assessment Analysis with Python

This notebook provides examples of Python code snippets for performing various analyses
relevant to healthcare outcome assessment, as discussed in the research report.

It covers data integration, predictive analytics using machine learning,
real-time monitoring, and patient-centered reporting.

Please note that these are simplified examples and may require further customization
based on the specific data and analytical goals.
"""

# ## 1. Data Integration

# This section demonstrates how to integrate data from different sources using the pandas library.

import pandas as pd

# Assume we have data from EHR, PROMs, and Wearable devices stored in separate CSV files.

# Load EHR data
ehr_data = pd.read_csv('ehr_data.csv')
print("EHR Data:")
print(ehr_data.head())
print("\n")

# Load PROMs data
proms_data = pd.read_csv('proms_data.csv')
print("PROMs Data:")
print(proms_data.head())
print("\n")

# Load wearable device data
wearable_data = pd.read_csv('wearable_data.csv')
print("Wearable Data:")
print(wearable_data.head())
print("\n")

# Merge the data based on a common patient identifier (e.g., 'patient_id')

# Merge EHR and PROMs data
merged_data = pd.merge(ehr_data, proms_data, on='patient_id', how='inner')
print("Merged EHR and PROMs Data:")
print(merged_data.head())
print("\n")

# Merge the result with wearable data
integrated_data = pd.merge(merged_data, wearable_data, on='patient_id', how='inner')
print("Integrated Healthcare Data:")
print(integrated_data.head())
print("\n")

# **Note:** The actual merging process might involve more complex logic depending on the data structures and relationships.

# ## 2. Predictive Analytics using Machine Learning

# This section provides examples of using scikit-learn for different machine learning tasks.

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.cluster import KMeans
from sklearn.metrics import accuracy_score, mean_squared_error
import numpy as np
import matplotlib.pyplot as plt

# Assume 'integrated_data' contains features and a target variable (e.g., 'readmission_within_30_days')

# Prepare data for classification (e.g., predicting readmission)
if 'readmission_within_30_days' in integrated_data.columns:
    X_classification = integrated_data.drop(['patient_id', 'readmission_within_30_days'], axis=1).select_dtypes(include=np.number).fillna(0) # Drop identifier and target, select numerical features, fill missing
    y_classification = integrated_data['readmission_within_30_days']
    X_train_class, X_test_class, y_train_class, y_test_class = train_test_split(X_classification, y_classification, test_size=0.3, random_state=42)

    # Logistic Regression for binary classification
    model_lr = LogisticRegression(random_state=42, solver='liblinear')
    model_lr.fit(X_train_class, y_train_class)
    y_pred_lr = model_lr.predict(X_test_class)
    accuracy_lr = accuracy_score(y_test_class, y_pred_lr)
    print(f"Logistic Regression Accuracy: {accuracy_lr:.2f}")
    print("\n")

    # Random Forest Classifier
    model_rf = RandomForestClassifier(random_state=42)
    model_rf.fit(X_train_class, y_train_class)
    y_pred_rf = model_rf.predict(X_test_class)
    accuracy_rf = accuracy_score(y_test_class, y_pred_rf)
    print(f"Random Forest Accuracy: {accuracy_rf:.2f}")
    print("\n")

# Prepare data for regression (e.g., predicting length of hospital stay)
if 'length_of_stay' in integrated_data.columns:
    X_regression = integrated_data.drop(['patient_id', 'length_of_stay'], axis=1).select_dtypes(include=np.number).fillna(0) # Drop identifier and target, select numerical features, fill missing
    y_regression = integrated_data['length_of_stay']
    X_train_reg, X_test_reg, y_train_reg, y_test_reg = train_test_split(X_regression, y_regression, test_size=0.3, random_state=42)

    from sklearn.linear_model import LinearRegression
    model_linear_reg = LinearRegression()
    model_linear_reg.fit(X_train_reg, y_train_reg)
    y_pred_linear_reg = model_linear_reg.predict(X_test_reg)
    mse_linear_reg = mean_squared_error(y_test_reg, y_pred_linear_reg)
    print(f"Linear Regression Mean Squared Error (Length of Stay): {mse_linear_reg:.2f}")
    print("\n")


# Prepare data for clustering (e.g., patient phenotyping)
X_clustering = integrated_data.drop('patient_id', axis=1).select_dtypes(include=np.number).fillna(0) # Drop identifier, select numerical features, fill missing

if not X_clustering.empty:
    # K-Means Clustering
    n_clusters = 3 # Example number of clusters
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
    integrated_data['cluster'] = kmeans.fit_predict(X_clustering)
    print("K-Means Clustering Results:")
    print(integrated_data[['patient_id', 'cluster']].head())
    print("\n")

    # Visualize clusters (for 2D data)
    if X_clustering.shape[1] >= 2:
        plt.scatter(X_clustering.iloc[:, 0], X_clustering.iloc[:, 1], c=integrated_data['cluster'], cmap='viridis')
        plt.title('Patient Clusters')
        plt.xlabel(X_clustering.columns)
        plt.ylabel(X_clustering.columns[1])
        plt.show()
    else:
        print("Clustering visualization requires at least two features.")
        print("\n")

# Prepare data for time series analysis (e.g., predicting daily hospital admissions)
# Assume we have a DataFrame 'daily_admissions' with 'date' and 'admission_count' columns

# Example time series data (replace with your actual data)
dates = pd.to_datetime(['2024-01-01', '2024-01-02', '2024-01-03', '2024-01-04', '2024-01-05'])
admission_counts = 
daily_admissions = pd.DataFrame({'date': dates, 'admission_count': admission_counts})
daily_admissions.set_index('date', inplace=True)

if not daily_admissions.empty:
    from statsmodels.tsa.arima.model import ARIMA

    # Fit ARIMA model (example parameters - adjust based on your data)
    model_arima = ARIMA(daily_admissions['admission_count'], order=(5, 1, 0))
    model_fit_arima = model_arima.fit()

    # Make predictions
    future_steps = 7
    predictions_arima = model_fit_arima.predict(start=len(daily_admissions), end=len(daily_admissions) + future_steps - 1)
    print("ARIMA Time Series Predictions (Next 7 days):")
    print(predictions_arima)
    print("\n")

    # Plotting the time series and predictions
    plt.figure(figsize=(10, 6))
    plt.plot(daily_admissions['admission_count'], label='Historical Admissions')
    plt.plot(pd.to_datetime(predictions_arima.index), predictions_arima, label='ARIMA Predictions')
    plt.title('Daily Hospital Admissions Forecasting')
    plt.xlabel('Date')
    plt.ylabel('Admission Count')
    plt.legend()
    plt.show()

# **Note:** Time series analysis often requires more specialized libraries and careful selection of model parameters.

# ## 3. Real-time Outcome Monitoring and Alerting

# This section provides a basic example of how to monitor a key outcome metric and trigger an alert.

# Assume we are monitoring the average heart rate from wearable devices in real-time.

def monitor_heart_rate(current_heart_rate, threshold=90):
    """Monitors heart rate and triggers an alert if it exceeds the threshold."""
    if current_heart_rate > threshold:
        print(f"Alert! Average heart rate ({current_heart_rate} BPM) exceeds the threshold ({threshold} BPM).")
    else:
        print(f"Average heart rate: {current_heart_rate} BPM.")

# Example usage with simulated real-time data
heart_rate_data = 
for hr in heart_rate_data:
    monitor_heart_rate(hr)

print("\n")

# **Note:** A real-time system would involve continuous data streams and more sophisticated alerting mechanisms.

# ## 4. Patient-Centered Reporting

# This section demonstrates how to generate a simple patient-centered report using the integrated data.

def generate_patient_report(patient_id, data):
    """Generates a simple report for a given patient."""
    patient_data = data[data['patient_id'] == patient_id]
    if not patient_data.empty:
        print(f"--- Patient Report for ID: {patient_id} ---")
        for col in patient_data.columns:
            if col!= 'patient_id':
                print(f"{col}: {patient_data[col].iloc}")
        print("---------------------------------------")
    else:
        print(f"Patient with ID {patient_id} not found.")

# Example usage
generate_patient_report(123, integrated_data)
generate_patient_report(456, integrated_data)

# **Note:** Real-world patient reports would be more detailed and tailored to specific needs.

# This notebook provides a starting point for using Python to analyze healthcare outcome data.
# Remember to adapt the code and techniques based on your specific research questions and data.