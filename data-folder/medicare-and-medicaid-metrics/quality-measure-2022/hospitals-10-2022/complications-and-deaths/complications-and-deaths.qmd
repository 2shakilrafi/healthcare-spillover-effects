---
title: "Complications and Deaths"
author: "Shakil Rafi"
format: html
toc: true
toc-depth: 4
lightbox: true
title-block-banner: true
df-print: tibble
comments:
  hypothesis: true
editor: visual
---

# State Level

## By Metric

Available in shinyapps.io

```{r}
library(shiny)
library(tidyverse)
library(janitor)
library(maps)
library(ggplot2)
library(ggforce)
library(sf)

# 1. Load and clean data
df <- read_csv("complications-and-deaths-state.csv") %>%
  clean_names() %>%
  rename_with(~str_replace_all(., "number_of_hospitals_", ""), starts_with("number_of_hospitals_")) %>%
  mutate(across(c(worse, same, better, too_few), as.numeric)) %>%
  mutate(
    not_available = if_else(is.na(worse) & is.na(same) & is.na(better) & is.na(too_few), 1, 0),
    state = toupper(state)
  ) %>%
  filter(state %in% state.abb)

# 2. US states map with sf
us_states <- map_data("state") %>%
  mutate(state = toupper(region)) %>%
  left_join(tibble(state = toupper(state.name), abb = state.abb), by = "state") %>%
  filter(!is.na(abb))

state_centroids <- us_states %>%
  group_by(abb) %>%
  summarise(long = mean(range(long)), lat = mean(range(lat))) %>%
  rename(state = abb)

# 3. Aggregate percentages
donut_data <- df %>%
  group_by(state, measure_id) %>%
  summarise(
    worse = sum(worse, na.rm = TRUE),
    same = sum(same, na.rm = TRUE),
    better = sum(better, na.rm = TRUE),
    too_few = sum(too_few, na.rm = TRUE),
    not_available = sum(not_available, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  left_join(state_centroids, by = "state") %>%
  pivot_longer(cols = c(worse, same, better, too_few, not_available),
               names_to = "category", values_to = "count") %>%
  group_by(state, measure_id) %>%
  mutate(
    total = sum(count),
    pct = 100 * count / total,
    end = 2 * pi * cumsum(pct / 100),
    start = lag(end, default = 0),
    mid = (start + end) / 2
  ) %>%
  ungroup()

# ---- UI ----
ui <- fluidPage(
  titlePanel("US Hospital Outcomes by State and Measure"),
  sidebarLayout(
    sidebarPanel(
      selectInput("metric", "Select Measure ID:", choices = unique(df$measure_id)),
      textOutput("instructions")
    ),
    mainPanel(
      plotOutput("map", click = "map_click", height = "600px"),
      plotOutput("donut", height = "400px")
    )
  )
)

# ---- SERVER ----
server <- function(input, output, session) {
  output$instructions <- renderText({
    "Click a state to view its hospital outcome breakdown as a donut chart."
  })

  output$map <- renderPlot({
    map_data <- us_states
    ggplot(map_data, aes(long, lat, group = group)) +
      geom_polygon(fill = "gray90", color = "white") +
      coord_map("albers", lat0 = 39, lat1 = 45) +
      theme_void() +
      labs(title = paste("US States –", input$metric))
  })

  output$donut <- renderPlot({
    click <- input$map_click
    if (is.null(click)) return(NULL)

    # Get closest state
    clicked_state <- donut_data %>%
      filter(measure_id == input$metric) %>%
      mutate(dist = sqrt((long - click$x)^2 + (lat - click$y)^2)) %>%
      slice_min(dist, n = 1) %>%
      pull(state)

    if (length(clicked_state) == 0) return(NULL)

    state_df <- donut_data %>%
      filter(state == clicked_state, measure_id == input$metric)

    ggplot(state_df) +
      geom_arc_bar(
        aes(
          x0 = 0, y0 = 0, r0 = 0.3, r = 1,
          start = start, end = end, fill = category
        ),
        color = "white", size = 0.3
      ) +
      coord_fixed() +
      theme_void() +
      labs(title = paste("Hospital Outcome Percentages –", clicked_state)) +
      scale_fill_manual(values = c(
        better = "green",
        same = "gray",
        worse = "red",
        too_few = "orange",
        not_available = "skyblue"
      ))
  })
}

# ---- RUN ----
shinyApp(ui, server)
```

# Hospital Level

```{r}
library(tidyverse)
library(naniar)
library(janitor)

hospitals <- read_csv("complications-and-deaths-hospital.csv") |>
  clean_names() |>
  replace_with_na(condition = ~ .x == "Not Available") |>
  mutate(score = as.numeric(score)) |>
  select(facility_id, facility_name, measure_id, score) |>
  pivot_wider(
    names_from = measure_id,
    values_from = score
  ) |>
  left_join(read_csv("../../geocode/geocoded.csv"), by = "facility_id")


hospitals |> write_csv("hospitals-geocoded.csv")
```

```{r}
hospitals |> 
    naniar::gg_miss_upset()
hospitals |>
    naniar::gg_miss_var()
hospitals |>
    naniar::vis_miss()
```

# Hospital Level

## Spatial Heatmap![](images/clipboard-9133593.png)

```{r}
library(tidyverse)
library(ggplot2)

# Identify metric columns
metric_cols <- hospitals %>%
  select(starts_with("MORT_"), starts_with("COMP_"), starts_with("PSI_")) |>
  names()

# Loop to plot
for (metric in metric_cols) {
  p <- ggplot(hospitals, aes(x = lon, y = lat)) +
    geom_point(aes_string(color = metric), size = 2, alpha = 0.7) +
    scale_color_viridis_c(option = "plasma", na.value = "grey90") +
    coord_map("albers", lat0 = 39, lat1 = 45,
              xlim = c(-125, -66), ylim = c(24, 50)) +
    theme_minimal() +
    labs(
      title = paste("Spatial Heatmap of", metric),
      x = "Longitude", y = "Latitude", color = metric
    )

  print(p)
}


```

## Moran's I

```{r}
library(tidyverse)
library(sf)
library(spdep)

# 1. Create sf object
hospitals_sf <- hospitals %>%
  filter(!is.na(lon), !is.na(lat)) %>%
  st_as_sf(coords = c("lon", "lat"), crs = 4326) %>%
  st_transform(3857)

# 2. Base coordinates
coords <- st_coordinates(hospitals_sf)

# 3. Metric columns
metric_cols <- hospitals %>%
  select(starts_with("MORT_"), starts_with("COMP_"), starts_with("PSI_")) %>%
  names()

# 4. Loop with per-metric filtering
moran_results <- map_dfr(metric_cols, function(metric) {
  values <- hospitals_sf[[metric]] |> as.numeric()

  if (all(is.na(values))) {
    return(tibble(metric = metric, moran_i = NA, p_value = NA))
  }

  # Remove NAs
  valid_idx <- which(!is.na(values))
  values_clean <- values[valid_idx]
  coords_clean <- coords[valid_idx, , drop = FALSE]

  # Recompute neighbors for valid subset
  knn <- knearneigh(coords_clean, k = 5)
  nb <- knn2nb(knn)
  lw <- nb2listw(nb, style = "W", zero.policy = TRUE)

  # Compute Moran's I
  result <- moran.test(values_clean, lw, zero.policy = TRUE)

  tibble(
    metric = metric,
    moran_i = result$estimate["Moran I statistic"],
    p_value = result$p.value
  )
})

# 5. Done — sort by significance
moran_results %>% arrange(p_value)


```

## SAR

### MORT_30_AMI

```{r}
library(spdep)
library(spatialreg)
library(sf)
library(tidyverse)

    # Pick a metric
metric <- "MORT_30_AMI"

hospitals_sf <- hospitals %>%
  filter(!is.na(lon), !is.na(lat), !is.na(.data[[metric]])) %>%
  st_as_sf(coords = c("lon", "lat"), crs = 4326) %>%
  st_transform(3857)

coords <- st_coordinates(hospitals_sf)
y <- as.numeric(hospitals_sf[[metric]])

nb <- knn2nb(knearneigh(coords, k = 5))
nb_sym <- make.sym.nb(nb)
lw <- nb2listw(nb_sym, style = "W", zero.policy = TRUE)

model <- lagsarlm(y ~ 1, listw = lw, method = "Matrix", zero.policy = TRUE)
summary(model)


```

### MORT_30_CABG

```{r}
metric <- "MORT_30_CABG"

hospitals_sf <- hospitals %>%
  filter(!is.na(lon), !is.na(lat), !is.na(.data[[metric]])) %>%
  st_as_sf(coords = c("lon", "lat"), crs = 4326) %>%
  st_transform(3857)

coords <- st_coordinates(hospitals_sf)
y <- as.numeric(hospitals_sf[[metric]])

nb <- knn2nb(knearneigh(coords, k = 5))
nb_sym <- make.sym.nb(nb)
lw <- nb2listw(nb_sym, style = "W", zero.policy = TRUE)

model <- lagsarlm(y ~ 1, listw = lw, method = "Matrix", zero.policy = TRUE)
summary(model)

```

### COMP_HIP_KNEE

```{r}
metric <- "COMP_HIP_KNEE"

hospitals_sf <- hospitals %>%
  filter(!is.na(lon), !is.na(lat), !is.na(.data[[metric]])) %>%
  st_as_sf(coords = c("lon", "lat"), crs = 4326) %>%
  st_transform(3857)

coords <- st_coordinates(hospitals_sf)
y <- as.numeric(hospitals_sf[[metric]])

nb <- knn2nb(knearneigh(coords, k = 5))
nb_sym <- make.sym.nb(nb)
lw <- nb2listw(nb_sym, style = "W", zero.policy = TRUE)

model <- lagsarlm(y ~ 1, listw = lw, method = "Matrix", zero.policy = TRUE)
summary(model)

```

```{r}
rho <- model$rho
W <- listw2mat(lw)
I <- diag(nrow(W))
M <- solve(I - rho * W)  # This is your multiplier matrix
```

```{r}
shock_hospital <- function(i) {
  shock <- rep(0, nrow(W))
  shock[i] <- 1
  as.vector(M %*% shock)
}
```

```{r}
library(tibble)
library(purrr)

impacts_df <- map_dfr(1:nrow(W), function(i) {
  delta <- shock_hospital(i)
  tibble(
    shocked_hospital = i,
    affected_hospital = 1:length(delta),
    delta = delta
  )
})
```

```{r}
library(dplyr)

hub_scores <- impacts_df %>%
  group_by(shocked_hospital) %>%
  summarize(total_spillover = sum(abs(delta[-shocked_hospital])), .groups = "drop") %>%
  arrange(desc(total_spillover))

print(hub_scores)
```

```{r}
library(ggplot2)
library(maps)
library(sf)
library(dplyr)
library(viridis)

# Get US state map from `maps`, convert to sf
us_states_map <- map("state", plot = FALSE, fill = TRUE)
us_states_sf <- st_as_sf(us_states_map)

# Convert to Albers Equal Area (EPSG:5070)
us_states_sf <- st_transform(us_states_sf, crs = 5070)

# This removes Alaska and Hawaii from maps::map
conus_states_sf <- us_states_sf %>%
  filter(!grepl("alaska|hawaii", ID))

# Assume hospitals_sf already has coordinates, EPSG:4326
hospitals_sf <- hospitals %>%
  filter(!is.na(lon), !is.na(lat), !is.na(.data[[metric]])) %>%
  st_as_sf(coords = c("lon", "lat"), crs = 4326) %>%
  st_transform(crs = 5070)

# Join spillover scores (make sure order is consistent!)
hospitals_sf$spillover_score <- hub_scores$total_spillover

ggplot() +
  geom_sf(data = conus_states_sf, fill = "white", color = "gray60", linewidth = 0.2) +
  geom_sf(data = hospitals_sf, aes(color = spillover_score), size = 1) +
  scale_color_viridis_c(name = "Spillover Score", option = "C") +
  theme_minimal() +
  labs(
    title = "Hospital Spillover Influence (CONUS, Albers Projection)",
    subtitle = "Metric: COMP_HIP_KNEE",
    caption = "SAR Model: Spatial lag only (~1), k = 5 nearest neighbors"
  )

```

### MORT_30_COPD

```{r}
metric <- "MORT_30_COPD"

hospitals_sf <- hospitals %>%
  filter(!is.na(lon), !is.na(lat), !is.na(.data[[metric]])) %>%
  st_as_sf(coords = c("lon", "lat"), crs = 4326) %>%
  st_transform(3857)

coords <- st_coordinates(hospitals_sf)
y <- as.numeric(hospitals_sf[[metric]])

nb <- knn2nb(knearneigh(coords, k = 5))
nb_sym <- make.sym.nb(nb)
lw <- nb2listw(nb_sym, style = "W", zero.policy = TRUE)

model <- lagsarlm(y ~ 1, listw = lw, method = "Matrix", zero.policy = TRUE)
summary(model)

```

### MORT_30_HF

```{r}
metric <- "MORT_30_HF"

hospitals_sf <- hospitals %>%
  filter(!is.na(lon), !is.na(lat), !is.na(.data[[metric]])) %>%
  st_as_sf(coords = c("lon", "lat"), crs = 4326) %>%
  st_transform(3857)

coords <- st_coordinates(hospitals_sf)
y <- as.numeric(hospitals_sf[[metric]])

nb <- knn2nb(knearneigh(coords, k = 5))
nb_sym <- make.sym.nb(nb)
lw <- nb2listw(nb_sym, style = "W", zero.policy = TRUE)

model <- lagsarlm(y ~ 1, listw = lw, method = "Matrix", zero.policy = TRUE)
summary(model)

```

### MORT_30_STK

```{r}
metric <- "MORT_30_STK"

hospitals_sf <- hospitals %>%
  filter(!is.na(lon), !is.na(lat), !is.na(.data[[metric]])) %>%
  st_as_sf(coords = c("lon", "lat"), crs = 4326) %>%
  st_transform(3857)

coords <- st_coordinates(hospitals_sf)
y <- as.numeric(hospitals_sf[[metric]])

nb <- knn2nb(knearneigh(coords, k = 5))
nb_sym <- make.sym.nb(nb)
lw <- nb2listw(nb_sym, style = "W", zero.policy = TRUE)

model <- lagsarlm(y ~ 1, listw = lw, method = "Matrix", zero.policy = TRUE)
summary(model)

```

```{r}
rho <- model$rho
W <- listw2mat(lw)
I <- diag(nrow(W))
M <- solve(I - rho * W)  # This is your multiplier matrix

```

```{r}
# Identity shock: increase value of hospital i by 1, everything else stays the same
shock_hospital <- function(i) {
  shock <- rep(0, nrow(W))
  shock[i] <- 1
  as.vector(M %*% shock)
}

```

![](images/clipboard-9133593.png)

```{r}
library(tibble)
library(purrr)

impacts_df <- map_dfr(1:nrow(W), function(i) {
  delta <- shock_hospital(i)
  tibble(
    shocked_hospital = i,
    affected_hospital = 1:length(delta),
    delta = delta
  )
})

```

```{r}
library(dplyr)

hub_scores <- impacts_df %>%
  group_by(shocked_hospital) %>%
  summarize(total_spillover = sum(abs(delta[-shocked_hospital])), .groups = "drop") %>%
  arrange(desc(total_spillover))

print(hub_scores)

```

![](images/clipboard-9133593.png)

```{r}
library(ggplot2)
library(maps)
library(sf)
library(dplyr)
library(viridis)

# Get US state map from `maps`, convert to sf
us_states_map <- map("state", plot = FALSE, fill = TRUE)
us_states_sf <- st_as_sf(us_states_map)

# Convert to Albers Equal Area (EPSG:5070)
us_states_sf <- st_transform(us_states_sf, crs = 5070)

# This removes Alaska and Hawaii from maps::map
conus_states_sf <- us_states_sf %>%
  filter(!grepl("alaska|hawaii", ID))

# Assume hospitals_sf already has coordinates, EPSG:4326
hospitals_sf <- hospitals %>%
  filter(!is.na(lon), !is.na(lat), !is.na(.data[[metric]])) %>%
  st_as_sf(coords = c("lon", "lat"), crs = 4326) %>%
  st_transform(crs = 5070)

# Join spillover scores (make sure order is consistent!)
hospitals_sf$spillover_score <- hub_scores$total_spillover

ggplot() +
  geom_sf(data = conus_states_sf, fill = "white", color = "gray60", linewidth = 0.2) +
  geom_sf(data = hospitals_sf, aes(color = spillover_score), size = 1) +
  scale_color_viridis_c(name = "Spillover Score", option = "C") +
  theme_minimal() +
  labs(
    title = "Hospital Spillover Influence (CONUS, Albers Projection)",
    subtitle = "Metric: MORT_30_STK",
    caption = "SAR Model: Spatial lag only (~1), k = 5 nearest neighbors"
  )


```

```         
```
